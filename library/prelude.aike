builtin fn newarr<T>(size: int): [T]
builtin fn sizeof<T>(): int
builtin fn length<T>(arr: [T]): int
builtin fn assert(expr: bool): void

extern fn print(...): void

inline fn operatorPlus(a: int): int
    a

inline fn operatorPlus(a: float): float
    a

inline fn operatorMinus(a: int): int
    llvm "
    %1 = sub i32 0, %0
    ret i32 %1"

inline fn operatorMinus(a: float): float
    llvm "
    %1 = fsub float 0.0, %0
    ret float %1"

inline fn operatorAdd(a: int, b: int): int
    llvm "
      declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32)

      %2 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %0, i32 %1)
      %3 = extractvalue { i32, i1 } %2, 1
      br i1 %3, label %trap, label %after

    trap:
      call void @llvm.trap()
      unreachable

    after:
      %4 = extractvalue { i32, i1 } %2, 0
      ret i32 %4"

inline fn operatorSubtract(a: int, b: int): int
    llvm "
      declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32)

      %2 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %0, i32 %1)
      %3 = extractvalue { i32, i1 } %2, 1
      br i1 %3, label %trap, label %after

    trap:
      call void @llvm.trap()
      unreachable

    after:
      %4 = extractvalue { i32, i1 } %2, 0
      ret i32 %4"

inline fn operatorMultiply(a: int, b: int): int
    llvm "
      declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32)

      %2 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %0, i32 %1)
      %3 = extractvalue { i32, i1 } %2, 1
      br i1 %3, label %trap, label %after

    trap:
      call void @llvm.trap()
      unreachable

    after:
      %4 = extractvalue { i32, i1 } %2, 0
      ret i32 %4"

inline fn operatorDivide(a: int, b: int): int
    llvm "
    %2 = sdiv i32 %0, %1
    ret i32 %2"

inline fn operatorModulo(a: int, b: int): int
    llvm "
    %2 = srem i32 %0, %1
    ret i32 %2"

inline fn operatorAddWrap(a: int, b: int): int
    llvm "
    %2 = add i32 %0, %1
    ret i32 %2"

inline fn operatorSubtractWrap(a: int, b: int): int
    llvm "
    %2 = sub i32 %0, %1
    ret i32 %2"

inline fn operatorMultiplyWrap(a: int, b: int): int
    llvm "
    %2 = mul i32 %0, %1
    ret i32 %2"

inline fn operatorMultiply(a: float, b: float): float
    llvm "
    %2 = fmul float %0, %1
    ret float %2"

inline fn operatorDivide(a: float, b: float): float
    llvm "
    %2 = fdiv float %0, %1
    ret float %2"

inline fn operatorModulo(a: float, b: float): float
    llvm "
    %2 = frem float %0, %1
    ret float %2"

inline fn operatorAdd(a: float, b: float): float
    llvm "
    %2 = fadd float %0, %1
    ret float %2"

inline fn operatorSubtract(a: float, b: float): float
    llvm "
    %2 = fsub float %0, %1
    ret float %2"

inline fn operatorLess(a: int, b: int): bool
    llvm "
    %2 = icmp slt i32 %0, %1
    ret i1 %2"

inline fn operatorLessEqual(a: int, b: int): bool
    llvm "
    %2 = icmp sle i32 %0, %1
    ret i1 %2"

inline fn operatorGreater(a: int, b: int): bool
    llvm "
    %2 = icmp sgt i32 %0, %1
    ret i1 %2"

inline fn operatorGreaterEqual(a: int, b: int): bool
    llvm "
    %2 = icmp sge i32 %0, %1
    ret i1 %2"

inline fn operatorEqual(a: int, b: int): bool
    llvm "
    %2 = icmp eq i32 %0, %1
    ret i1 %2"

inline fn operatorNotEqual(a: int, b: int): bool
    llvm "
    %2 = icmp ne i32 %0, %1
    ret i1 %2"

inline fn operatorLess(a: float, b: float): bool
    llvm "
    %2 = fcmp ult float %0, %1
    ret i1 %2"

inline fn operatorLessEqual(a: float, b: float): bool
    llvm "
    %2 = fcmp ule float %0, %1
    ret i1 %2"

inline fn operatorGreater(a: float, b: float): bool
    llvm "
    %2 = fcmp ugt float %0, %1
    ret i1 %2"

inline fn operatorGreaterEqual(a: float, b: float): bool
    llvm "
    %2 = fcmp uge float %0, %1
    ret i1 %2"

inline fn operatorEqual(a: float, b: float): bool
    llvm "
    %2 = fcmp ueq float %0, %1
    ret i1 %2"

inline fn operatorNotEqual(a: float, b: float): bool
    llvm "
    %2 = fcmp une float %0, %1
    ret i1 %2"

inline fn int(a: float): int
    llvm "
    %1 = fptosi float %0 to i32
    ret i32 %1"

inline fn float(a: int): float
    llvm "
    %1 = sitofp i32 %0 to float
    ret float %1"

extern fn spawn(f: fn(): void): void
extern fn yield(): void

fn array<T>(size: int, f: fn(int): T): [T]
    var a = newarr(size)

    for e, i in a
        e = f(i)

    a

fn map<T, U>(a: [T], f: fn(T): U): [U]
    var b = newarr(length(a))

    for e, i in a
        b[i] = f(e)

    b

fn filter<T>(a: [T], f: fn(T): bool): [T]
    var b = newarr(length(a))
    var count = 0

    for e in a
        if f(e)
            b[count] = e
            count = count + 1

    var c = newarr(count)

    for _, i in c
        c[i] = b[i]

    c

fn reduce<T, S>(a: [T], f: fn(S, T): S, s: S): S
    var r = s

    for e in a
        r = f(r, e)

    r

fn scan<T, S>(a: [T], f: fn(S, T): S, s: S): [S]
    var r = newarr(length(a) + 1)
    var t = s

    for e, i in a
        r[i] = t
        t = f(t, e)

    r[length(a)] = t

    r
