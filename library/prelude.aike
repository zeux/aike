builtin fn newarr<T>(size: int): [T]
builtin fn sizeof<T>(): int
builtin fn length<T>(arr: [T]): int
builtin fn assert(expr: bool)

extern fn spawn(f: fn())
extern fn yield()

fn map<T, U>(a: [T], f: fn(T): U): [U]
    var b = newarr(length(a))

    for e, i in a
        b[i] = f(e)

    b

fn filter<T>(a: [T], f: fn(T): bool): [T]
    var b = newarr(length(a))
    var count = 0

    for e in a
        if f(e)
            b[count] = e
            count = count + 1

    var c = newarr(count)

    for _, i in c
        c[i] = b[i]

    c

fn reduce<T, S>(a: [T], f: fn(S, T): S, s: S): S
    var r = s

    for e in a
        r = f(r, e)

    r

fn scan<T, S>(a: [T], f: fn(S, T): S, s: S): [S]
    var r = newarr(length(a) + 1)
    var t = s

    for e, i in a
        r[i] = t
        t = f(t, e)

    r[length(a)] = t

    r
