let unsafe_newarr(l: int): 'a[] =
    builtin(arrayNew, l)

let unsafe_setarr(x: 'a[], i: int, v: 'a): unit =
    builtin(arraySet, x, i, v)

let length(x: 'a[]): int =
    builtin(arrayLength, x)

let array(count, gen) =
    if count == 0 then
        []
    else
        let arr = unsafe_newarr(count)
        for i in 0..count-1 do
            unsafe_setarr(arr, i, gen(i))
        arr

let map(arr, f) =
    array(arr#length, fun i -> f(arr[i]))

let concat(lhs, rhs) =
    array(lhs#length + rhs#length, fun i -> if i < lhs#length then lhs[i] else rhs[i - lhs#length])

let reduce(arr, f) =
    let loop(res, offset) =
        if offset < arr#length then
            loop(f(res, arr[offset]), offset + 1)
        else
            res

    loop(arr[0], 1)
