let printindent(indent) =
    for i in 0..indent-1 do
        print("  ")

let dumpArray(data, pred) =
    for i in 0..data#length-1 do
        if i != 0 then
            print(", ")
        pred(data[i])

let dumpSynType(ty) =
    match ty with
    | SynTypeNone ->
        print("?")

    | SynTypeGeneric(name) ->
        print("'")
        print(name.name)

    | SynTypeIdentifier(ty, generics) ->
        print(ty.name)
        if generics != [] then
            print("<")
            dumpArray(generics, dumpSynType)
            print(">")

    | SynTypeArray(contained) ->
        print("(")
        dumpSynType(contained)
        print(")[]")

    | SynTypeFunction(result, args) ->
        print("(")
        dumpArray(args, dumpSynType)
        print(") -> ")
        dumpSynType(result)

    | SynTypeRecord(members) ->
        print("{")
        dumpArray(members, dumpSynTypedVar)
        print("}")

    | SynTypeTuple(members) ->
        print("(")
        dumpArray(members, dumpSynType)
        print(")")

let dumpSynTypeOpt(ty) =
    match ty with
    | SynTypeNone -> ()
    | _ ->
        print(": ")
        dumpSynType(ty)

let dumpSynTypedVar(tv: SynTypedVar) =
    print(tv.name.name)
    dumpSynTypeOpt(tv.ty)

let dumpSynUnaryOpType(op) =
    match op with
    | SynUnaryOpPlus -> print("unary +")
    | SynUnaryOpMinus -> print("unary -")
    | SynUnaryOpRefGet -> print("unary !")
    | SynUnaryOpNot -> print("unary not")

let dumpSynBinaryOpType(op) =
    match op with
    | SynBinaryOpAdd -> print("binary +")
    | SynBinaryOpSubtract -> print("binary -")
    | SynBinaryOpMultiply -> print("binary *")
    | SynBinaryOpDivide -> print("binary /")
    | SynBinaryOpLess -> print("binary <")
    | SynBinaryOpLessEqual -> print("binary <=")
    | SynBinaryOpGreater -> print("binary >")
    | SynBinaryOpGreaterEqual -> print("binary >=")
    | SynBinaryOpEqual -> print("binary ==")
    | SynBinaryOpNotEqual -> print("binary !=")
    | SynBinaryOpRefSet -> print("binary :=")
    | SynBinaryOpAnd -> print("binary and")
    | SynBinaryOpOr -> print("binary or")

let dumpSynFunction(name: SynIdentifier, result, args) =
    print(name.name)
    print("(")
    dumpArray(args, dumpSynTypedVar)
    print(")")
    dumpSynTypeOpt(result)

let dumpSynMatch(node, indent) =
    match node with
    | SynMatchNumberLiteral(_, value) ->
        printi(value)

    | SynMatchCharacterLiteral(_, value) ->
        print([value])

    | SynMatchBooleanLiteral(_, value) ->
        print(if value then "true" else "false")

    | SynMatchArrayLiteral(_, elements) ->
        print("[")
        dumpArray(elements, fun m -> dumpSynMatch(m, indent))
        print("]")

    | SynMatchTupleLiteral(_, elements) ->
        print("(")
        dumpArray(elements, fun m -> dumpSynMatch(m, indent))
        print(")")

    | SynMatchTypeSimple(_, ty, alias) ->
        print(ty.name)
        print(" ")
        print(alias.name)

    | SynMatchTypeComplex(_, ty, args, arg_names) ->
        print(ty.name)
        print("(")
        for i in 0..args#length-1 do
            if i != 0 then
                print(", ")
            if i < arg_names#length then
                print(arg_names[i].name)
                print(" = ")
            dumpSynMatch(args[i], indent)

    | SynMatchPlaceholder(_, alias) ->
        dumpSynTypedVar(alias)

    | SynMatchPlaceholderUnnamed(_) ->
        print("_")

    | SynMatchOr(_, options) ->
        for i in 0..options#length-1 do
            if i != 0 then
                print(" | ")
            dumpSynMatch(options[i], indent)

    | SynMatchIf(_, value, condition) ->
        dumpSynMatch(value, indent)
        println()
        printindent(indent)
        print("if")
        dumpSynNode(condition, indent + 1)

let dumpSynNode(node, indent) =
    printindent(indent)

    match node with
    | SynUnit(_) ->
        print("()")
        println()
        
    | SynNumberLiteral(_, value) ->
        printi(value)
        println()

    | SynCharacterLiteral(_, value) ->
        print([value])
        println()

    | SynBooleanLiteral(_, value) ->
        print(if value then "true" else "false")
        println()

    | SynArrayLiteral(_, elements) ->
        print("[")
        println()
        for e in elements do
            dumpSynNode(e, indent + 1)
        print("]")
        println()

    | SynTupleLiteral(_, elements) ->
        print("(")
        println()
        for e in elements do
            dumpSynNode(e, indent + 1)
        print(")")
        println()

    | SynTypeDefinition(_, name, ty, generics) ->
        print("type ")
        print(name.name)
        if generics != [] then
            print("<")
            dumpArray(generics, dumpSynType)
            print(">")
        print(" =")
        println()
        printindent(indent + 1)
        dumpSynType(ty)
        println()

    | SynUnionDefinition(_, name, members, generics) ->
        print("type ")
        print(name.name)
        if generics != [] then
            print("<")
            dumpArray(generics, dumpSynType)
            print(">")
        print(" =")
        println()
        for m in members do
            printindent(indent + 1)
            print("| ")
            dumpSynTypedVar(m)
            println()

    | SynVariableReference(_, name) ->
        print(name)
        println()

    | SynUnaryOp(_, op, expr) ->
        dumpSynUnaryOpType(op)
        println()
        dumpSynNode(expr, indent + 1)

    | SynBinaryOp(_, op, left, right) ->
        dumpSynBinaryOpType(op)
        println()
        dumpSynNode(left, indent + 1)
        dumpSynNode(right, indent + 1)

    | SynCall(_, expr, args, arg_names) ->
        print("call")
        println()
        dumpSynNode(expr, indent + 1)
        for i in 0..args#length-1 do
            printindent(indent)
            print("arg ")
            if i < arg_names#length then
                print(arg_names[i].name)
            else
                printi(i)
            println()
            dumpSynNode(args[i], indent + 1)

    | SynArrayIndex(_, expr, index) ->
        print("index")
        println()
        dumpSynNode(expr, indent + 1)
        printindent(indent)
        print("with")
        println()
        dumpSynNode(index, indent + 1)

    | SynArraySlice(_, expr, index_start, index_end) ->
        print("slice of")
        println()
        dumpSynNode(expr, indent + 1)
        printindent(indent)
        print("from")
        println()
        dumpSynNode(index_start, indent + 1)
        printindent(indent)
        print("to")
        match index_end with
        | Some v ->
            println()
            dumpSynNode(v, indent + 1)
        | None ->
            print(" end")
            println()

    | SynMemberAccess(_, expr, member) ->
        print("member ")
        print(member.name)
        print(" of")
        println()
        dumpSynNode(expr, indent + 1)

    | SynLetVar(_, var, body) ->
        print("let ")
        dumpSynTypedVar(var)
        print(" =")
        println()
        dumpSynNode(body, indent + 1)

    | SynLetVars(_, vars, body) ->
        print("let (")
        dumpArray(vars, dumpSynTypedVar)
        print(") =")
        println()
        dumpSynNode(body, indent + 1)

    | SynLLVM(_, body) ->
        print("llvm {")
        print(body)
        print("}")
        println()

    | SynLetFunc(_, var, result, args, body) ->
        if var.name == [] then
            print("fun ")
            dumpSynFunction(var, result, args)
            print(" ->")
        else
            print("let ")
            dumpSynFunction(var, result, args)
            print(" =")
        println()
        dumpSynNode(body, indent + 1)

    | SynExternFunc(_, var, result, args) ->
        print("extern ")
        dumpSynFunction(var, result, args)
        println()

    | SynIfThenElse(_, condition, thenbody, elsebody) ->
        print("if")
        println()
        dumpSynNode(condition, indent + 1)
        printindent(indent)
        print("then")
        println()
        dumpSynNode(thenbody, indent + 1)
        printindent(indent)
        print("else")
        println()
        dumpSynNode(elsebody, indent + 1)

    | SynForInDo(_, var, container, body) ->
        print("for ")
        dumpSynTypedVar(var)
        println()
        printindent(indent)
        print("in")
        println()
        dumpSynNode(container, indent + 1)
        printindent(indent)
        print("do")
        println()
        dumpSynNode(body, indent + 1)

    | SynForInRangeDo(_, var, range_start, range_end, body) ->
        print("for ")
        dumpSynTypedVar(var)
        println()
        printindent(indent)
        print("from")
        println()
        dumpSynNode(range_start, indent + 1)
        print("to")
        println()
        dumpSynNode(range_end, indent + 1)
        printindent(indent)
        print("do")
        println()
        dumpSynNode(body, indent + 1)

    | SynWhileDo(_, condition, body) ->
        print("while")
        println()
        dumpSynNode(condition, indent + 1)
        printindent(indent)
        print("do")
        println()
        dumpSynNode(body, indent + 1)

    | SynMatchWith(_, expr, variants, expressions) ->
        print("match")
        println()
        dumpSynNode(expr, indent + 1)
        printindent(indent)
        print("with")
        println()
        for i in 0..variants#length-1 do
            printindent(indent)
            print("| ")
            dumpSynMatch(variants[i], indent + 1)
            print(" ->")
            println()
            dumpSynNode(expressions[i], indent + 1)

    | SynBlock(_, expressions) ->
        print("block")
        println()
        for e in expressions do
            dumpSynNode(e, indent + 1)
