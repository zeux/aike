type DynArray<'T> = { data: ref<('T[], int)> }

let unsafe_setlen(x: 'a[], l: int): 'a[] =
    llvm "insertvalue typeof(%x) %x, i32 %l, 1"

let dynarray() =
    DynArray(ref(([], 0)))

let push(x: DynArray<'T>, v: 'T) =
    let (da, dc) = !x.data
    let dl = da#length
    x.data :=
        if dl < dc then
            let na = unsafe_setlen(da, dl + 1)
            unsafe_setarr(na, dl, v)
            (na, dc)
        else
            let nc = dc * 3 / 2 + 1
            let na = array(nc, fun i -> if i < dl then da[i] else v)
            (na, nc)

let pop(x: DynArray<'T>) =
    let (da, dc) = !x.data
    let dl = da#length
    let v = da[dl-1]
    x.data := (unsafe_setlen(da, dl-1), dc)

let toArray(x: DynArray<'T>) =
    let (da, dc) = !x.data
    da
