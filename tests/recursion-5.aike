type Tree<'T> =
    | Leaf Data<'T>
    | Node (Tree<'T>, Tree<'T>)

type Data<'T> =
    | Value 'T
    | Subtree Tree<'T>

let reduceData(d, f) =
    match d with
    | Value x -> x
    | Subtree s -> reduce(s, f)

let reduce(r, f) =
    match r with
    | Leaf d -> reduceData(d, f)
    | Node (l, r) -> f(reduce(l, f), reduce(r, f))

reduce(Node(Leaf(Value(1)), Node(Leaf(Subtree(Leaf(Value(2)))), Leaf(Subtree(Node(Leaf(Value(3)), Leaf(Value(4))))))), fun (a, b) -> a + b)

// OUTPUT:
// 10
