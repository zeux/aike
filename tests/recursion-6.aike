type Tree<'T> =
    | Leaf Data<'T>
    | Node (Tree<'T>, Tree<'T>)

type Data<'T> =
    | Value 'T
    | Subtree Tree<'T>

let reduce(r, f) =
    let reduceData(d) =
        match d with
        | Value x -> x
        | Subtree s -> reduceTree(s)

    let reduceTree(r) =
        match r with
        | Leaf d -> reduceData(d)
        | Node (l, r) -> f(reduceTree(l), reduceTree(r))

    reduceTree(r)

if reduce(Node(Leaf(Value(true)), Node(Leaf(Subtree(Leaf(Value(false)))), Leaf(Subtree(Node(Leaf(Value(true)), Leaf(Value(false))))))), fun (a, b) -> if a then true else b) then
    reduce(Node(Leaf(Value(1)), Node(Leaf(Subtree(Leaf(Value(2)))), Leaf(Subtree(Node(Leaf(Value(3)), Leaf(Value(4))))))), fun (a, b) -> a + b)
else
    0

// OUTPUT:
// 10
