let length(x: 'a[]): int =
    builtin(arrayLength, x)

let get_unsafe(x: 'a[], i: int): 'a =
    builtin(arrayGet, x, i)

let set_unsafe(x: 'a[], i: int, v: 'a): unit =
    builtin(arraySet, x, i, v)

let newarr_unsafe(l: int): 'a[] =
    builtin(arrayNew, l)

let map(arr: 'a[], f) =
    if arr#length == 0 then
        []
    else
        let res = newarr_unsafe(arr#length)
        let loop(i) =
            if i < arr#length then
                set_unsafe(res, i, f(get_unsafe(arr, i)))
                loop(i + 1)
        loop(0)
        res

let x = [1, 2, 3]
let y =
    x
    #map (fun i -> i * i)
    #map (fun i -> i + 2)

let fx: (int[], (int) -> bool) -> bool[] = map

let z = fx(x, fun i -> i == 2)

if z[1] then y[2] else 0

// OUTPUT:
// 11
