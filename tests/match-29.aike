type Node = Leaf int | Tree { left: Node; right: Node }
type Node2 = { a: Node; b: int }

let y = Node2(Leaf(1), 2)

match y with
| Node2(Leaf(x), y) -> x + y
| Node2(Tree _, y) -> y
| _ -> 0

// ERRORS:
// (9,3): This case is already covered
