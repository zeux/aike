// http://flyingfrogblog.blogspot.com/2010/04/variant-types-and-pattern-matching-in.html

type expr =
    | Int int
    | Var int
    | Add (expr, expr)
    | Mul (expr, expr)

let cmp_int(m, n) : int =
    if m<n then -1 else
      if m==n then 0 else 1

let cmp(f, g) : int =
    match (f, g) with
    | (Int m, Int n) -> cmp_int(m, n)
    | (Int _, Var _) -> -1
    | (Int _, Add _) -> -1
    | (Int _, Mul _) -> -1
    | (Var x, Var y) -> cmp_int(x, y)
    | (Var _, Add _) -> -1
    | (Var _, Mul _) -> -1
    | (Add(f0, g0), Add(f1, g1)) ->
        let c = cmp(f0, f1)
        if c!=0 then c else
          cmp(g0, g1)
    | (Add _, Mul _) -> -1
    | (Mul(f0, g0), Mul(f1, g1)) ->
        let c = cmp(f0, f1)
        if c!=0 then c else
          cmp(g0, g1)
    | _ -> 1

let add(f, g) : expr =
    match (f, g) with
    | (Int m, Int n) -> Int(m + n)
    | (Int m, Add(Int n, f)) -> Add((Int(m + n), f))
    | (f, Int(0)) -> f
    | (Int(0), f) -> f
    | (Add(f, g), h) -> add(f, add(g, h))
    | (f, Add(g, h)) ->
        (match cmp(f, g) with
        // | -1 -> Add(f, Add(g, h))
        | x if x == -1 -> Add((f, Add((g, h))))
        | 0 -> Add((Mul((Int(2), f)), h))
        | _ -> add(g, add(f, h)))
    | (f, g) ->
        match cmp(f, g) with
        // | -1 -> Add(f, g)
        | x if x == -1 -> Add((f, g))
        | 0 -> Mul((Int(2), f))
        | _ -> Add((g, f))

let mul(f, g) : expr =
    match (f, g) with
    | (Int m, Int n) -> Int(m * n)
    | (Int m, Mul(Int n, f)) -> Mul((Int(m * n), f))
    | (f, Int(0)) -> Int(0)
    | (Int(0), f) -> Int(0)
    | (f, Int(1)) -> f
    | (Int(1), f) -> f
    | (Mul(f, g), h) -> mul(f, mul(g, h))
    | (f, Mul(g, h)) ->
        (match cmp(f, g) with
        | 1 -> mul(g, mul(f, h))
        | _ -> Mul((f, Mul((g, h)))))
    | (f, g) ->
        match cmp(f, g) with
        | 1 -> mul(g, f)
        | _ -> Mul((f, g))

let d(f, x) : expr =
    match f with
    | Int n -> Int(0)
    | Var y -> Int(if x==y then 1 else 0)
    | Add(f, g) -> add(d(f, x), d(g, x))
    | Mul(f, g) -> add(mul(f, d(g, x)), mul(g, d(f, x)))

let x = Var(0)
let f = add(add(mul(mul(x, x), x), x), Int(-1))
let y = d(f, 0)
let z = d(y, 0)
let w = d(z, 0)

match w with
| Int(6) -> 1
| _ -> 0

// OUTPUT:
// 1
